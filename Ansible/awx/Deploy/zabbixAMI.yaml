---
- name: Provision EC2, configure it with zabbix, and create an AMI
  hosts: localhost
  gather_facts: no

  vars:
    aws_region: "us-west-2"
    instance_type: "t2.micro"
    ami_id: "ami-0505f2b0a5ff82ec6"  # Example for Amazon Linux 2
    key_name: "goldman"
    security_group_name: "temp-security-group"
    instance_name: "MyConfiguredInstance"
    ami_name: "MyCustomAMI"
    zabbix_version: "6.0"
    zabbix_repo_url: "http://repo.zabbix.com/zabbix/{{ zabbix_version }}/ubuntu/pool/main/z/zabbix-release/zabbix-release_{{ zabbix_version }}-1+ubuntu20.04_all.deb"
    zabbix_server: "zabbix-server-mysql"
    zabbix_frontend: "zabbix-frontend-php"
    db_name: "zabbix"
    db_user: "zabbix"
    db_password: "your_db_password"
    db_root_password: "your_db_root_password"
    security_group: "sg-e7083f81"


  tasks:
    - name: Launch EC2 instance
      amazon.aws.ec2:
        key_name: "{{ key_name }}"
        instance_type: "{{ instance_type }}"
        image: "ami-0505f2b0a5ff82ec6"
        region: "{{ aws_region }}"
        group: "{{ security_group }}"
        instance_tags:
          Name: "{{ instance_name }}"
        wait: yes
      register: ec2_instance

    - name: Add the new instance to the inventory
      add_host:
        name: "{{ item.public_dns_name }}"
        ansible_user: ec2-user
        ansible_ssh_private_key_file: /path/to/your/private/key.pem
      with_items: "{{ ec2_instance.instances }}"

    - name: Wait for SSH to become available
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 10
        timeout: 300
        state: started
      with_items: "{{ ec2_instance.instances }}"

- name: Configure EC2 instance
  hosts: all
  become: yes

  tasks:
    - name: Update and upgrade the system
      apt:
        update_cache: yes
        upgrade: dist

    - name: Install necessary dependencies
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - wget
        - lsb-release
        - gnupg
        - software-properties-common

    - name: Download Zabbix repository package
      get_url:
        url: "{{ zabbix_repo_url }}"
        dest: "/tmp/zabbix-release.deb"

    - name: Install Zabbix repository package
      apt:
        deb: "/tmp/zabbix-release.deb"
        state: present

    - name: Install Zabbix server, frontend, and agent
      apt:
        name:
          - "{{ zabbix_server }}"
          - "{{ zabbix_frontend }}"
          - zabbix-agent
        state: present

    - name: Install MySQL server
      apt:
        name: mysql-server
        state: present

    - name: Start MySQL service
      service:
        name: mysql
        state: started
        enabled: yes

    - name: Create Zabbix database
      mysql_db:
        name: "{{ db_name }}"
        state: present
        login_user: root
        login_password: "{{ db_root_password }}"

    - name: Create Zabbix database user
      mysql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        priv: "{{ db_name }}.*:ALL"
        state: present
        login_user: root
        login_password: "{{ db_root_password }}"

    - name: Import initial schema and data into the database
      command: "mysql -u {{ db_user }} -p{{ db_password }} {{ db_name }} < /usr/share/doc/zabbix-server-mysql*/create.sql.gz"
      args:
        warn: false

    - name: Configure Zabbix server to use the database
      lineinfile:
        path: /etc/zabbix/zabbix_server.conf
        regexp: '^# DBPassword='
        line: 'DBPassword={{ db_password }}'

    - name: Restart Zabbix server and agent
      service:
        name: "{{ item }}"
        state: restarted
        enabled: yes
      loop:
        - zabbix-server
        - zabbix-agent

    - name: Ensure Apache is installed
      apt:
        name: apache2
        state: present

    - name: Configure PHP for Zabbix frontend
      lineinfile:
        path: /etc/php/7.4/apache2/php.ini
        regexp: '^;?date.timezone'
        line: 'date.timezone = UTC'

    - name: Restart Apache web server
      service:
        name: apache2
        state: restarted
        enabled: yes

    - name: Notify user to finish the Zabbix frontend setup
      debug:
        msg: "Zabbix installation completed. Please visit your server's IP address in a web browser to complete the frontend setup."

- name: Create an AMI from the configured instance
  hosts: localhost
  gather_facts: no

  vars:
    instance_id: "{{ ec2_instance.instances[0].id }}"
    ami_name: "MyCustomAMI"

  tasks:
    - name: Create AMI from instance
      amazon.aws.ec2_ami:
        instance_id: "{{ instance_id }}"
        name: "{{ ami_name }}"
        region: "{{ aws_region }}"
        wait: yes
      register: ami

    - name: Tag the new AMI
      amazon.aws.ec2_tag:
        resource: "{{ ami.image_id }}"
        region: "{{ aws_region }}"
        state: present
        tags:
          Name: "{{ ami_name }}"

- name: Clean up resources
  hosts: localhost
  gather_facts: no

  tasks:
    - name: Terminate the EC2 instance
      amazon.aws.ec2_instance:
        instance_ids: "{{ instance_id }}"
        state: absent
        region: "{{ aws_region }}"
        wait: yes
    - name: delete the security group
      amazon.aws.ec2_group:
        name: "{{ security_group_name }}"
        state: absent
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc_id | default(omit) }}"